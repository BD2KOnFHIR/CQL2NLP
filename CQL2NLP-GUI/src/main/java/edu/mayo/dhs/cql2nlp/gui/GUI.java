package edu.mayo.dhs.cql2nlp.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicBoolean;

public class GUI extends JDialog {

    public static String utsUser;
    public static char[] utsPass;

    public static final AtomicBoolean nextPhaseFlag = new AtomicBoolean(false);

    private JPanel contentPane;

    public GUI() {
        setContentPane(contentPane);
        setModal(true);

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);


        // Now, first start with a login pane
        LoginPane loginPane = new LoginPane();
        setContentPane(loginPane.$$$getRootComponent$$$());
        holdForNextPhase();
        CQLEditing cqlPane = new CQLEditing();
        setContentPane(cqlPane.$$$getRootComponent$$$());
        holdForNextPhase();
        NLPRuleSetGenerationProgress progressPane = new NLPRuleSetGenerationProgress();
        setContentPane(progressPane.$$$getRootComponent$$$());
        holdForNextPhase();
        NLPRulesetEditor editor = new NLPRulesetEditor();
        setContentPane(editor.$$$getRootComponent$$$());
        holdForNextPhase();
        System.exit(0);
    }

    // Utility method that locks execution thread until sub-phase is complete by setting nextPhaseFlag to true
    private void holdForNextPhase() {
        synchronized (nextPhaseFlag) {
            while (!nextPhaseFlag.get()) {
                try {
                    nextPhaseFlag.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            nextPhaseFlag.set(false);
        }
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        GUI dialog = new GUI();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
