package edu.mayo.dhs.cql2nlp.gui;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class NLPRulesetEditor extends JDialog {
    private final Map<String, java.util.List<String>> rulesets;
    private final RuleSetTableModel tableModel;
    private JPanel panel1;
    private JList<String> valueSetSelector;
    private JTable editableValueList;
    private JButton button1;
    private JButton button2;
    private JButton finalizeAndExportRulesetButton;
    private java.util.List<String> currEditingList;

    public NLPRulesetEditor() {
        setContentPane(panel1);
        setModal(true);

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        // call onCancel() on ESCAPE
        panel1.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        rulesets = new HashMap<>();
        ArrayList<String> vals = new ArrayList<>(NLPRuleSetGenerationProgress.rulesets.keySet());
        vals.sort(String::compareTo);
        valueSetSelector.setListData(vals.toArray(new String[0]));
        if (vals.size() > 0) {
            valueSetSelector.setSelectedIndex(0);
            NLPRuleSetGenerationProgress.rulesets.forEach((k, v) -> {
                ArrayList<String> list = new ArrayList<>(v);
                list.sort(String::compareTo);
                rulesets.put(k, list);
            });
            currEditingList = rulesets.get(valueSetSelector.getSelectedValue());
        } else {
            currEditingList = new ArrayList<>();
        }
        this.tableModel = new RuleSetTableModel();
        this.editableValueList.setModel(tableModel);
        button2.addActionListener(e -> {
            currEditingList.add("");
            tableModel.fireTableDataChanged();
        });
        button1.addActionListener(e -> currEditingList.remove(editableValueList.getSelectedRow()));
        finalizeAndExportRulesetButton.addActionListener(e -> {
            ObjectWriter ow = new ObjectMapper().writerWithDefaultPrettyPrinter();
            try {
                ow.writeValue(new File("nlp_export.json"), rulesets);
                dispose();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        });
        valueSetSelector.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                currEditingList = rulesets.get(e.getFirstIndex());
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        panel1.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        splitPane1.setLeftComponent(scrollPane1);
        valueSetSelector = new JList();
        scrollPane1.setViewportView(valueSetSelector);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(panel2);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        editableValueList = new JTable();
        scrollPane2.setViewportView(editableValueList);
        button1 = new JButton();
        button1.setText("-");
        panel2.add(button1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button2 = new JButton();
        button2.setText("+");
        panel2.add(button2, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        finalizeAndExportRulesetButton = new JButton();
        finalizeAndExportRulesetButton.setText("Finalize and Export Ruleset");
        panel1.add(finalizeAndExportRulesetButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private class RuleSetTableModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return currEditingList.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public String getValueAt(int rowIndex, int columnIndex) {
            return currEditingList.get(rowIndex);
        }

        @Override
        public boolean isCellEditable(int rowidx, int colidx) {
            return true;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            currEditingList.set(rowIndex, aValue.toString());
        }
    }
}
